syntax = "proto2";
package kv_service;

import "google/protobuf/empty.proto";

enum ValueType {
    VALUE_TYPE_STRING = 0;
    VALUE_TYPE_NUMBER = 1;
    VALUE_TYPE_INTEGER = 2;
    VALUE_TYPE_BOOLEAN = 3;
    VALUE_TYPE_JSON = 4;
}

message Pair {
    // Project that this key belongs to.
    required string project_id = 1;
    // Grouped namespace that this belongs to.
    required string namespace = 2;
    // The value is always stored as a string, this metadata helps for parsing.
    required ValueType type = 3;
    // TTL (time to live)
    optional int32 ttl = 4;
    // Unique key.
    required string key = 5;
    required string value = 6;
}

message PairRequest {
    // Project that this key belongs to.
    required string project_id = 1;
    // Grouped namespace that this belongs to.
    required string namespace = 2;
    // Unique key.
    required string key = 4;
}

// List pairs belonging to a namespace.
message ListPairsRequest {
    required int32 page_size = 1;
    // Used if wanting to paginate.
    // If not provided will be the first page.
    optional string token = 2;
    // Project.
    required string project_id = 3;
    // Grouped namespace.
    required string namespace = 4;
}

// A list of pairs.
message ListPairsResponse {
    required int32 page_size = 1;
    // Used for finding the next page when paginating.
    // This is not provided on the last page.
    optional string token = 2;
    repeated Pair pairs = 3;
}

// List all namespaces belonging to a project.
message ListNamespacesRequest {
    // Project to find all namespaces within.
    required string project_id = 1;
}

// Information about a namespace.
message Namespace {
    required string project_id = 1;
    required string name = 2;
    required int32 count = 3;
}

// List of namespaces.
message ListNamespacesResponse {
    repeated Namespace namespaces = 1;
}

// Set pairs in batch.
// Also use this when setting one key.
message SetPairsRequest {
    repeated Pair pairs = 1;
}

message DeletePairsRequest {
    repeated PairRequest pairs = 1;
}

// Delete all namespaces belonging to a project.
message DeleteProjectRequest {
    required string project_id = 1;
}

// Delete an entire namespace with pairs.
message DeleteNamespaceRequest {
    required string project_id = 1;
    required string namespace = 2;
}

service KvService {
    rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);
    rpc ListPairs(ListPairsRequest) returns (ListPairsResponse);
    rpc SetPairs(SetPairsRequest) returns (google.protobuf.Empty);
    rpc GetPair(PairRequest) returns (Pair);
    rpc DeletePairs(DeletePairsRequest) returns (google.protobuf.Empty);
    rpc DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty);
    rpc DeleteNamespace(DeleteNamespaceRequest) returns (google.protobuf.Empty);
}