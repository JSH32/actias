/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace kv_service {
    export enum ValueType {
        VALUE_TYPE_STRING = 0,
        VALUE_TYPE_NUMBER = 1,
        VALUE_TYPE_INTEGER = 2,
        VALUE_TYPE_BOOLEAN = 3,
        VALUE_TYPE_JSON = 4,
    }
    export interface Pair {
        // Project that this key belongs to.
        projectId?: string;
        // Grouped namespace that this belongs to.
        namespace?: string;
        // The value is always stored as a string, this metadata helps for parsing.
        type?: kv_service.ValueType;
        // TTL (time to live)
        ttl?: number;
        // Unique key.
        key?: string;
        value?: string;
    }
    export interface PairRequest {
        // Project that this key belongs to.
        projectId?: string;
        // Grouped namespace that this belongs to.
        namespace?: string;
        // Unique key.
        key?: string;
    }
    // List pairs belonging to a namespace.
    export interface ListPairsRequest {
        pageSize?: number;
        // Used if wanting to paginate.
    // If not provided will be the first page.
        token?: string;
        // Project.
        projectId?: string;
        // Grouped namespace.
        namespace?: string;
    }
    // A list of pairs.
    export interface ListPairsResponse {
        pageSize?: number;
        // Used for finding the next page when paginating.
        token?: string;
        pairs?: kv_service.Pair[];
    }
    // List all namespaces belonging to a project.
    export interface ListNamespacesRequest {
        // Project to find all namespaces within.
        projectId?: string;
    }
    // Information about a namespace.
    export interface Namespace {
        projectId?: string;
        name?: string;
    }
    // List of namespaces.
    export interface ListNamespacesResponse {
        namespaces?: kv_service.Namespace[];
    }
    // Set pairs in batch.
    // Also use this when setting one key.
    export interface SetPairsRequest {
        pairs?: kv_service.Pair[];
    }
    export interface DeletePairsRequest {
        pairs?: kv_service.PairRequest[];
    }
    // Delete all namespaces belonging to a project.
    export interface DeleteProjectRequest {
        projectId?: string;
    }
    // Delete an entire namespace with pairs.
    export interface DeleteNamespaceRequest {
        projectId?: string;
        namespace?: string;
    }
    export interface KvService {
        listNamespaces(
            data: ListNamespacesRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ListNamespacesResponse>;
        listPairs(
            data: ListPairsRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<ListPairsResponse>;
        setPairs(
            data: SetPairsRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<google.protobuf.Empty>;
        getPair(
            data: PairRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<Pair>;
        deletePairs(
            data: DeletePairsRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<google.protobuf.Empty>;
        deleteProject(
            data: DeleteProjectRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<google.protobuf.Empty>;
        deleteNamespace(
            data: DeleteNamespaceRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<google.protobuf.Empty>;
    }
}
export namespace google {
    export namespace protobuf {
        // tslint:disable-next-line:no-empty-interface
        export interface Empty {
        }
    }
}

